/**
 * Shipping API
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { CancelShipment } from '../model/cancelShipment';
import { Carrier } from '../model/carrier';
import { Errors } from '../model/errors';
import { Shipment } from '../model/shipment';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api-sandbox.pitneybowes.com/shippingservices';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ShipmentApiApiKeys {
}

export class ShipmentApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'oAuth2ClientCredentials': new OAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ShipmentApiApiKeys, value: string) {
        (this.authentications as any)[ShipmentApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.oAuth2ClientCredentials.accessToken = token;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * 
     * @summary cancelShipment
     * @param xPBTransactionId Required. A unique identifier for the transaction, up to 25 characters.
     * @param shipmentId shipmentId
     * @param xPBUnifiedErrorStructure Recommended. Set this to true to use the standard error object if an error occurs.
     * @param xPBShipperCarrierAccountId UPS Only. The unique identifier returned in the shipperCarrierAccountId field by the [Register an Existing Carrier Account API.(https://shipping.pitneybowes.com/api/post-carrier-accounts-register.html)
     * @param cancelInitiator Indicates that this refund request is initiated by the shipper. Set this to: SHIPPER
     * @param carrier Conditional. The carrier. This is required if the carrier is not USPS
     */
    public async cancelShipment (xPBTransactionId: string, shipmentId: string, xPBUnifiedErrorStructure?: string, xPBShipperCarrierAccountId?: string, cancelInitiator?: string, carrier?: Carrier, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CancelShipment;  }> {
        const localVarPath = this.basePath + '/v1/shipments/{shipmentId}'
            .replace('{' + 'shipmentId' + '}', encodeURIComponent(String(shipmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'xPBTransactionId' is not null or undefined
        if (xPBTransactionId === null || xPBTransactionId === undefined) {
            throw new Error('Required parameter xPBTransactionId was null or undefined when calling cancelShipment.');
        }

        // verify required parameter 'shipmentId' is not null or undefined
        if (shipmentId === null || shipmentId === undefined) {
            throw new Error('Required parameter shipmentId was null or undefined when calling cancelShipment.');
        }

        if (cancelInitiator !== undefined) {
            localVarQueryParameters['cancelInitiator'] = ObjectSerializer.serialize(cancelInitiator, "string");
        }

        if (carrier !== undefined) {
            localVarQueryParameters['carrier'] = ObjectSerializer.serialize(carrier, "Carrier");
        }

        localVarHeaderParams['X-PB-TransactionId'] = ObjectSerializer.serialize(xPBTransactionId, "string");
        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "string");
        localVarHeaderParams['X-PB-Shipper-Carrier-AccountId'] = ObjectSerializer.serialize(xPBShipperCarrierAccountId, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CancelShipment;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "CancelShipment");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The API returns the label as either a Base64 string or a link to a PDF. For more information visit [Create Shipment Documents](https://shipping.pitneybowes.com/api/post-shipments.html). Following are samples of different carriers -  * [Create a USPS (U.S. Postal Service) Label](https://shipping.pitneybowes.com/api/post-shipments-usps.html)  * [Create a USPS PMOD Label](https://shipping.pitneybowes.com/api/post-shipments-pmod.html) * [Create a USPS Scan-Based Return Label](https://shipping.pitneybowes.com/api/post-shipments-returns.html) * [Create a Pure Post Return Label](https://shipping.pitneybowes.com/api/post-shipments-pure-post-return.html) * [Create a Newgistics Label](https://shipping.pitneybowes.com/api/post-shipments-newgistics.html) * [Create a PB Presort Label](https://shipping.pitneybowes.com/api/post-shipments-presort.html) * [Create a PB Cross-Border Shipment](https://shipping.pitneybowes.com/api/post-shipments-cbds.html) * [Create a UPS (United Parcel Service) Label](https://shipping.pitneybowes.com/api/post-shipments-ups.html)
     * @summary This operation creates a shipment and purchases a shipment label.
     * @param xPBTransactionId Required. A unique identifier for the transaction, up to 25 characters.
     * @param shipment request
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
     * @param xPBIntegratorCarrierId USPS Only. Negotiated services rate, if applicable.
     * @param xPBShipperRatePlan USPS Only. Shipper rate plan, if applicable. For more information, see [this FAQ](https://shipping.pitneybowes.com/faqs/rates.html#rate-plans-faq).
     * @param xPBShipmentGroupId  **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**.The job number that represents the agreement between the merchant and PB Presort. This was provided by Pitney Bowes during [merchant onboarding for PB Presort](https://shipping.pitneybowes.com/carriers/pb-presort.html).
     * @param xPBShipperCarrierAccountId **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**. The merchant\&#39;s Mailer ID (MID), as provided by Pitney Bowes during merchant onboarding for PB Presort.
     * @param includeDeliveryCommitment If set to true, returns estimated transit times in days. Only for USPS Create Shipment. See also [Pitney Bowes Delivery Guarantee](https://shipping.pitneybowes.com/faqs/delivery-guarantee.html) [Do all USPS services return transit times?](https://shipping.pitneybowes.com/faqs/shipments.html#transit-times-faq)
     */
    public async createShipmentLabel (xPBTransactionId: string, shipment: Shipment, xPBUnifiedErrorStructure?: boolean, xPBIntegratorCarrierId?: string, xPBShipperRatePlan?: string, xPBShipmentGroupId?: string, xPBShipperCarrierAccountId?: string, includeDeliveryCommitment?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Shipment;  }> {
        const localVarPath = this.basePath + '/v1/shipments';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'xPBTransactionId' is not null or undefined
        if (xPBTransactionId === null || xPBTransactionId === undefined) {
            throw new Error('Required parameter xPBTransactionId was null or undefined when calling createShipmentLabel.');
        }

        // verify required parameter 'shipment' is not null or undefined
        if (shipment === null || shipment === undefined) {
            throw new Error('Required parameter shipment was null or undefined when calling createShipmentLabel.');
        }

        if (includeDeliveryCommitment !== undefined) {
            localVarQueryParameters['includeDeliveryCommitment'] = ObjectSerializer.serialize(includeDeliveryCommitment, "string");
        }

        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "boolean");
        localVarHeaderParams['X-PB-TransactionId'] = ObjectSerializer.serialize(xPBTransactionId, "string");
        localVarHeaderParams['X-PB-Integrator-CarrierId'] = ObjectSerializer.serialize(xPBIntegratorCarrierId, "string");
        localVarHeaderParams['X-PB-Shipper-Rate-Plan'] = ObjectSerializer.serialize(xPBShipperRatePlan, "string");
        localVarHeaderParams['X-PB-ShipmentGroupId'] = ObjectSerializer.serialize(xPBShipmentGroupId, "string");
        localVarHeaderParams['X-PB-Shipper-Carrier-AccountId'] = ObjectSerializer.serialize(xPBShipperCarrierAccountId, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(shipment, "Shipment")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Shipment;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Shipment");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary reprintShipment
     * @param shipmentId Required. The shipment ID that was issued when shipment label was generated.
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
     * @param carrier 
     */
    public async reprintShipment (shipmentId: string, xPBUnifiedErrorStructure?: boolean, carrier?: Carrier, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Shipment;  }> {
        const localVarPath = this.basePath + '/v1/shipments/{shipmentId}'
            .replace('{' + 'shipmentId' + '}', encodeURIComponent(String(shipmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'shipmentId' is not null or undefined
        if (shipmentId === null || shipmentId === undefined) {
            throw new Error('Required parameter shipmentId was null or undefined when calling reprintShipment.');
        }

        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "boolean");
        localVarHeaderParams['carrier'] = ObjectSerializer.serialize(carrier, "Carrier");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Shipment;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Shipment");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary retryShipment
     * @param originalTransactionId 
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
     * @param carrier 
     */
    public async retryShipment (originalTransactionId: string, xPBUnifiedErrorStructure?: boolean, carrier?: Carrier, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Shipment;  }> {
        const localVarPath = this.basePath + '/v1/shipments';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'originalTransactionId' is not null or undefined
        if (originalTransactionId === null || originalTransactionId === undefined) {
            throw new Error('Required parameter originalTransactionId was null or undefined when calling retryShipment.');
        }

        if (originalTransactionId !== undefined) {
            localVarQueryParameters['originalTransactionId'] = ObjectSerializer.serialize(originalTransactionId, "string");
        }

        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "boolean");
        localVarHeaderParams['carrier'] = ObjectSerializer.serialize(carrier, "Carrier");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Shipment;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Shipment");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
