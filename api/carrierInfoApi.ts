/**
 * Shipping API
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { Carrier } from '../model/carrier';
import { CarrierFacilityRequest } from '../model/carrierFacilityRequest';
import { CarrierFacilityResponse } from '../model/carrierFacilityResponse';
import { CarrierRule } from '../model/carrierRule';
import { CrossBorderQuotesErrors } from '../model/crossBorderQuotesErrors';
import { Errors } from '../model/errors';
import { ISOCountryCode } from '../model/iSOCountryCode';
import { InlineResponse200 } from '../model/inlineResponse200';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api-sandbox.pitneybowes.com/shippingservices';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CarrierInfoApiApiKeys {
}

export class CarrierInfoApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'oAuth2ClientCredentials': new OAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: CarrierInfoApiApiKeys, value: string) {
        (this.authentications as any)[CarrierInfoApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.oAuth2ClientCredentials.accessToken = token;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
     * @summary Find Carrier Facilities
     * @param carrierFacilityRequest 
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
     */
    public async getCarrierFacilities (carrierFacilityRequest: CarrierFacilityRequest, xPBUnifiedErrorStructure?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CarrierFacilityResponse;  }> {
        const localVarPath = this.basePath + '/v1/carrier-facility';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'carrierFacilityRequest' is not null or undefined
        if (carrierFacilityRequest === null || carrierFacilityRequest === undefined) {
            throw new Error('Required parameter carrierFacilityRequest was null or undefined when calling getCarrierFacilities.');
        }

        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "boolean");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(carrierFacilityRequest, "CarrierFacilityRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CarrierFacilityResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "CarrierFacilityResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This operation retrieves a carrier\'s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
     * @summary This operation retrieves a carrier\'s license agreement.
     * @param carrier The carrier name. Currently this must be set to: UPS
     * @param originCountryCode The two-character ISO country code for the country where the shipment originates.
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
     */
    public async getCarrierLicenseAgreement (carrier: string, originCountryCode: ISOCountryCode, xPBUnifiedErrorStructure?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InlineResponse200;  }> {
        const localVarPath = this.basePath + '/v1/carrier/license-agreements';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'carrier' is not null or undefined
        if (carrier === null || carrier === undefined) {
            throw new Error('Required parameter carrier was null or undefined when calling getCarrierLicenseAgreement.');
        }

        // verify required parameter 'originCountryCode' is not null or undefined
        if (originCountryCode === null || originCountryCode === undefined) {
            throw new Error('Required parameter originCountryCode was null or undefined when calling getCarrierLicenseAgreement.');
        }

        if (carrier !== undefined) {
            localVarQueryParameters['carrier'] = ObjectSerializer.serialize(carrier, "string");
        }

        if (originCountryCode !== undefined) {
            localVarQueryParameters['originCountryCode'] = ObjectSerializer.serialize(originCountryCode, "ISOCountryCode");
        }

        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "boolean");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InlineResponse200;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "InlineResponse200");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This operation retrieves the rules governing the carrier\'s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
     * @summary Retrieves the rules governing the carrier\'s services.
     * @param carrier The carrier name. **Currently this must be set to: USPS** 
     * @param originCountryCode The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates.
     * @param destinationCountryCode The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment\&#39;s destination address.
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
     * @param rateTypeId The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned.
     * @param futureShipmentDate If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS**
     * @param returnShipment If set to true, provides only services applicable for return shipment.
     * @param compactResponse If set to true, returns only summary, without special service details.
     */
    public async getCarrierServiceRules (carrier: Carrier, originCountryCode: ISOCountryCode, destinationCountryCode: ISOCountryCode, xPBUnifiedErrorStructure?: boolean, rateTypeId?: string, futureShipmentDate?: string, returnShipment?: Date, compactResponse?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CarrierRule;  }> {
        const localVarPath = this.basePath + '/v1/information/rules/rating-services';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'carrier' is not null or undefined
        if (carrier === null || carrier === undefined) {
            throw new Error('Required parameter carrier was null or undefined when calling getCarrierServiceRules.');
        }

        // verify required parameter 'originCountryCode' is not null or undefined
        if (originCountryCode === null || originCountryCode === undefined) {
            throw new Error('Required parameter originCountryCode was null or undefined when calling getCarrierServiceRules.');
        }

        // verify required parameter 'destinationCountryCode' is not null or undefined
        if (destinationCountryCode === null || destinationCountryCode === undefined) {
            throw new Error('Required parameter destinationCountryCode was null or undefined when calling getCarrierServiceRules.');
        }

        if (carrier !== undefined) {
            localVarQueryParameters['carrier'] = ObjectSerializer.serialize(carrier, "Carrier");
        }

        if (originCountryCode !== undefined) {
            localVarQueryParameters['originCountryCode'] = ObjectSerializer.serialize(originCountryCode, "ISOCountryCode");
        }

        if (destinationCountryCode !== undefined) {
            localVarQueryParameters['destinationCountryCode'] = ObjectSerializer.serialize(destinationCountryCode, "ISOCountryCode");
        }

        if (rateTypeId !== undefined) {
            localVarQueryParameters['rateTypeId'] = ObjectSerializer.serialize(rateTypeId, "string");
        }

        if (futureShipmentDate !== undefined) {
            localVarQueryParameters['futureShipmentDate'] = ObjectSerializer.serialize(futureShipmentDate, "string");
        }

        if (returnShipment !== undefined) {
            localVarQueryParameters['returnShipment'] = ObjectSerializer.serialize(returnShipment, "Date");
        }

        if (compactResponse !== undefined) {
            localVarQueryParameters['compactResponse'] = ObjectSerializer.serialize(compactResponse, "boolean");
        }

        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "boolean");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CarrierRule;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "CarrierRule");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary This operation returns a list of supported destination countries to which the carrier offers international shipping services.
     * @param carrier The carrier name. Currently this must be set to: USPS
     * @param originCountryCode The two-character ISO country code for the country where the shipment originates.
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
     */
    public async getCarrierSupportedDestination (carrier: Carrier, originCountryCode: ISOCountryCode, xPBUnifiedErrorStructure?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<object>;  }> {
        const localVarPath = this.basePath + '/v1/countries';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'carrier' is not null or undefined
        if (carrier === null || carrier === undefined) {
            throw new Error('Required parameter carrier was null or undefined when calling getCarrierSupportedDestination.');
        }

        // verify required parameter 'originCountryCode' is not null or undefined
        if (originCountryCode === null || originCountryCode === undefined) {
            throw new Error('Required parameter originCountryCode was null or undefined when calling getCarrierSupportedDestination.');
        }

        if (carrier !== undefined) {
            localVarQueryParameters['carrier'] = ObjectSerializer.serialize(carrier, "Carrier");
        }

        if (originCountryCode !== undefined) {
            localVarQueryParameters['originCountryCode'] = ObjectSerializer.serialize(originCountryCode, "ISOCountryCode");
        }

        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "boolean");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<object>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<object>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
