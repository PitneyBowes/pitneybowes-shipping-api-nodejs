/**
 * Shipping API
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { Errors } from '../model/errors';
import { ParcelProtectionCreateRequest } from '../model/parcelProtectionCreateRequest';
import { ParcelProtectionCreateResponse } from '../model/parcelProtectionCreateResponse';
import { ParcelProtectionPolicyResponse } from '../model/parcelProtectionPolicyResponse';
import { ParcelProtectionQuoteRequest } from '../model/parcelProtectionQuoteRequest';
import { ParcelProtectionQuoteResponse } from '../model/parcelProtectionQuoteResponse';
import { VoidParcelProtectionRequest } from '../model/voidParcelProtectionRequest';
import { VoidParcelProtectionResponse } from '../model/voidParcelProtectionResponse';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api-sandbox.pitneybowes.com/shippingservices';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ParcelProtectionApiApiKeys {
}

export class ParcelProtectionApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'oAuth2ClientCredentials': new OAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ParcelProtectionApiApiKeys, value: string) {
        (this.authentications as any)[ParcelProtectionApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.oAuth2ClientCredentials.accessToken = token;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * This API lets merchants request Pitney Bowes [Parcel Protection](https://shipping.pitneybowes.com/faqs/parcel-protection.html) coverage for shipments. Merchants can request coverage for shipments created with the Shipping APIs as well as for shipments created with other platforms.
     * @summary Parcel Protection Coverage
     * @param xPBTransactionId Required. A unique identifier for the transaction, up to 25 characters.
     * @param parcelProtectionReferenceId Required. The identifier for the PB Parcel Protection policy that is being voided.
     * @param voidParcelProtectionRequest manifest
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
     */
    public async cancelParcelProtection (xPBTransactionId: string, parcelProtectionReferenceId: string, voidParcelProtectionRequest: VoidParcelProtectionRequest, xPBUnifiedErrorStructure?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: VoidParcelProtectionResponse;  }> {
        const localVarPath = this.basePath + '/v1/parcel-protection/void';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'xPBTransactionId' is not null or undefined
        if (xPBTransactionId === null || xPBTransactionId === undefined) {
            throw new Error('Required parameter xPBTransactionId was null or undefined when calling cancelParcelProtection.');
        }

        // verify required parameter 'parcelProtectionReferenceId' is not null or undefined
        if (parcelProtectionReferenceId === null || parcelProtectionReferenceId === undefined) {
            throw new Error('Required parameter parcelProtectionReferenceId was null or undefined when calling cancelParcelProtection.');
        }

        // verify required parameter 'voidParcelProtectionRequest' is not null or undefined
        if (voidParcelProtectionRequest === null || voidParcelProtectionRequest === undefined) {
            throw new Error('Required parameter voidParcelProtectionRequest was null or undefined when calling cancelParcelProtection.');
        }

        if (parcelProtectionReferenceId !== undefined) {
            localVarQueryParameters['parcelProtectionReferenceId'] = ObjectSerializer.serialize(parcelProtectionReferenceId, "string");
        }

        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "boolean");
        localVarHeaderParams['X-PB-TransactionId'] = ObjectSerializer.serialize(xPBTransactionId, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(voidParcelProtectionRequest, "VoidParcelProtectionRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: VoidParcelProtectionResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "VoidParcelProtectionResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This API lets merchants request Pitney Bowes [Parcel Protection](https://shipping.pitneybowes.com/faqs/parcel-protection.html) coverage for shipments. Merchants can request coverage for shipments created with the Shipping APIs as well as for shipments created with other platforms.
     * @summary Parcel Protection Coverage
     * @param xPBTransactionId Required. A unique identifier for the transaction, up to 25 characters.
     * @param parcelProtectionCreateRequest manifest
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
     */
    public async getParcelProtectionCoverage (xPBTransactionId: string, parcelProtectionCreateRequest: ParcelProtectionCreateRequest, xPBUnifiedErrorStructure?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ParcelProtectionCreateResponse;  }> {
        const localVarPath = this.basePath + '/v1/parcel-protection/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'xPBTransactionId' is not null or undefined
        if (xPBTransactionId === null || xPBTransactionId === undefined) {
            throw new Error('Required parameter xPBTransactionId was null or undefined when calling getParcelProtectionCoverage.');
        }

        // verify required parameter 'parcelProtectionCreateRequest' is not null or undefined
        if (parcelProtectionCreateRequest === null || parcelProtectionCreateRequest === undefined) {
            throw new Error('Required parameter parcelProtectionCreateRequest was null or undefined when calling getParcelProtectionCoverage.');
        }

        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "boolean");
        localVarHeaderParams['X-PB-TransactionId'] = ObjectSerializer.serialize(xPBTransactionId, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(parcelProtectionCreateRequest, "ParcelProtectionCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ParcelProtectionCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "ParcelProtectionCreateResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This API provides a quote for covering a shipment through Pitney Bowes [Parcel Protection](https://www.pitneybowes.com/us/ecommerce-delivery-services/parcel-protection.html).
     * @summary Parcel Protection Quote
     * @param xPBTransactionId Required. A unique identifier for the transaction, up to 25 characters.
     * @param parcelProtectionQuoteRequest manifest
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
     */
    public async getParcelProtectionQuote (xPBTransactionId: string, parcelProtectionQuoteRequest: ParcelProtectionQuoteRequest, xPBUnifiedErrorStructure?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ParcelProtectionQuoteResponse;  }> {
        const localVarPath = this.basePath + '/v1/parcel-protection/quote';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'xPBTransactionId' is not null or undefined
        if (xPBTransactionId === null || xPBTransactionId === undefined) {
            throw new Error('Required parameter xPBTransactionId was null or undefined when calling getParcelProtectionQuote.');
        }

        // verify required parameter 'parcelProtectionQuoteRequest' is not null or undefined
        if (parcelProtectionQuoteRequest === null || parcelProtectionQuoteRequest === undefined) {
            throw new Error('Required parameter parcelProtectionQuoteRequest was null or undefined when calling getParcelProtectionQuote.');
        }

        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "boolean");
        localVarHeaderParams['X-PB-TransactionId'] = ObjectSerializer.serialize(xPBTransactionId, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(parcelProtectionQuoteRequest, "ParcelProtectionQuoteRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ParcelProtectionQuoteResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "ParcelProtectionQuoteResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This operation retrieves the policy status and other information on the Parcel Protection policies you have purchased for your shipments. Further Details https://shipping.pitneybowes.com/api/get-parcel-protection-reports.html
     * @summary Parcel Protection Reports
     * @param xPBTransactionId Required. A unique identifier for the transaction, up to 25 characters.
     * @param developerId Required. Your Pitney Bowes developer ID.
     * @param policyCreatedFromDate The beginning of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset.
     * @param xPBUnifiedErrorStructure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
     * @param policyCreatedToDate The end of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset.
     * @param policyReferenceId The unique identifier for the PB Parcel Protection policy.].
     * @param parcelTrackingNumber The parcel tracking number of the shipment that the policy applies to.
     * @param merchantId The merchant\&#39;s Shipper ID. This is the value of the postalReportingNumber element in the Merchant Object.
     * @param policyStatus Whether the policy is active or voided.
     * @param size The number of transactions to return per page in the result set.
     * @param page The index number of the page to return. Page index numbering starts at 0. Specifying page&#x3D;0 returns the first page of the result set.
     * @param sort Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc).
     */
    public async getParcelProtectionReports (xPBTransactionId: string, developerId: string, policyCreatedFromDate: string, xPBUnifiedErrorStructure?: boolean, policyCreatedToDate?: string, policyReferenceId?: string, parcelTrackingNumber?: string, merchantId?: string, policyStatus?: string, size?: string, page?: string, sort?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ParcelProtectionPolicyResponse;  }> {
        const localVarPath = this.basePath + '/v1/parcel-protection/{developerId}/policies'
            .replace('{' + 'developerId' + '}', encodeURIComponent(String(developerId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'xPBTransactionId' is not null or undefined
        if (xPBTransactionId === null || xPBTransactionId === undefined) {
            throw new Error('Required parameter xPBTransactionId was null or undefined when calling getParcelProtectionReports.');
        }

        // verify required parameter 'developerId' is not null or undefined
        if (developerId === null || developerId === undefined) {
            throw new Error('Required parameter developerId was null or undefined when calling getParcelProtectionReports.');
        }

        // verify required parameter 'policyCreatedFromDate' is not null or undefined
        if (policyCreatedFromDate === null || policyCreatedFromDate === undefined) {
            throw new Error('Required parameter policyCreatedFromDate was null or undefined when calling getParcelProtectionReports.');
        }

        if (policyCreatedFromDate !== undefined) {
            localVarQueryParameters['policyCreatedFromDate'] = ObjectSerializer.serialize(policyCreatedFromDate, "string");
        }

        if (policyCreatedToDate !== undefined) {
            localVarQueryParameters['policyCreatedToDate'] = ObjectSerializer.serialize(policyCreatedToDate, "string");
        }

        if (policyReferenceId !== undefined) {
            localVarQueryParameters['policyReferenceId'] = ObjectSerializer.serialize(policyReferenceId, "string");
        }

        if (parcelTrackingNumber !== undefined) {
            localVarQueryParameters['parcelTrackingNumber'] = ObjectSerializer.serialize(parcelTrackingNumber, "string");
        }

        if (merchantId !== undefined) {
            localVarQueryParameters['merchantId'] = ObjectSerializer.serialize(merchantId, "string");
        }

        if (policyStatus !== undefined) {
            localVarQueryParameters['policyStatus'] = ObjectSerializer.serialize(policyStatus, "string");
        }

        if (size !== undefined) {
            localVarQueryParameters['size'] = ObjectSerializer.serialize(size, "string");
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "string");
        }

        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "string");
        }

        localVarHeaderParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer.serialize(xPBUnifiedErrorStructure, "boolean");
        localVarHeaderParams['X-PB-TransactionId'] = ObjectSerializer.serialize(xPBTransactionId, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.oAuth2ClientCredentials.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oAuth2ClientCredentials.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ParcelProtectionPolicyResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "ParcelProtectionPolicyResponse");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
