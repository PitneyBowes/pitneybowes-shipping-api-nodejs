/**
 * Shipping API
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from '../api';
import { Address } from './address';

export class CustomsInfo {
    'eELPFC'?: string;
    /**
    * format: YYYY-MM-DD
    */
    'blanketEndDate'?: string;
    /**
    * format: YYYY-MM-DD
    */
    'blanketStartDate'?: string;
    'certificateNumber'?: string;
    'comments'?: string;
    /**
    * ISO-4217
    */
    'currencyCode': string;
    'customsDeclaredValue'?: number;
    'declarationStatement'?: string;
    'freightCharge'?: number;
    'fromCustomsReference'?: string;
    'handlingCosts'?: number;
    'importerCustomsReference'?: string;
    'insuredAmount'?: number;
    'insuredNumber'?: string;
    'invoiceNumber'?: string;
    'licenseNumber'?: string;
    'otherCharge'?: number;
    'otherDescription'?: string;
    'otherType'?: CustomsInfo.OtherTypeEnum;
    'packingCosts'?: number;
    'producerSpecification'?: CustomsInfo.ProducerSpecificationEnum;
    'reasonForExport'?: CustomsInfo.ReasonForExportEnum;
    'reasonForExportExplanation'?: string;
    'sdrValue'?: number;
    'shippingDocumentType'?: CustomsInfo.ShippingDocumentTypeEnum;
    'signatureContact'?: Address;
    'termsOfSale'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "eELPFC",
            "baseName": "EELPFC",
            "type": "string"
        },
        {
            "name": "blanketEndDate",
            "baseName": "blanketEndDate",
            "type": "string"
        },
        {
            "name": "blanketStartDate",
            "baseName": "blanketStartDate",
            "type": "string"
        },
        {
            "name": "certificateNumber",
            "baseName": "certificateNumber",
            "type": "string"
        },
        {
            "name": "comments",
            "baseName": "comments",
            "type": "string"
        },
        {
            "name": "currencyCode",
            "baseName": "currencyCode",
            "type": "string"
        },
        {
            "name": "customsDeclaredValue",
            "baseName": "customsDeclaredValue",
            "type": "number"
        },
        {
            "name": "declarationStatement",
            "baseName": "declarationStatement",
            "type": "string"
        },
        {
            "name": "freightCharge",
            "baseName": "freightCharge",
            "type": "number"
        },
        {
            "name": "fromCustomsReference",
            "baseName": "fromCustomsReference",
            "type": "string"
        },
        {
            "name": "handlingCosts",
            "baseName": "handlingCosts",
            "type": "number"
        },
        {
            "name": "importerCustomsReference",
            "baseName": "importerCustomsReference",
            "type": "string"
        },
        {
            "name": "insuredAmount",
            "baseName": "insuredAmount",
            "type": "number"
        },
        {
            "name": "insuredNumber",
            "baseName": "insuredNumber",
            "type": "string"
        },
        {
            "name": "invoiceNumber",
            "baseName": "invoiceNumber",
            "type": "string"
        },
        {
            "name": "licenseNumber",
            "baseName": "licenseNumber",
            "type": "string"
        },
        {
            "name": "otherCharge",
            "baseName": "otherCharge",
            "type": "number"
        },
        {
            "name": "otherDescription",
            "baseName": "otherDescription",
            "type": "string"
        },
        {
            "name": "otherType",
            "baseName": "otherType",
            "type": "CustomsInfo.OtherTypeEnum"
        },
        {
            "name": "packingCosts",
            "baseName": "packingCosts",
            "type": "number"
        },
        {
            "name": "producerSpecification",
            "baseName": "producerSpecification",
            "type": "CustomsInfo.ProducerSpecificationEnum"
        },
        {
            "name": "reasonForExport",
            "baseName": "reasonForExport",
            "type": "CustomsInfo.ReasonForExportEnum"
        },
        {
            "name": "reasonForExportExplanation",
            "baseName": "reasonForExportExplanation",
            "type": "string"
        },
        {
            "name": "sdrValue",
            "baseName": "sdrValue",
            "type": "number"
        },
        {
            "name": "shippingDocumentType",
            "baseName": "shippingDocumentType",
            "type": "CustomsInfo.ShippingDocumentTypeEnum"
        },
        {
            "name": "signatureContact",
            "baseName": "signatureContact",
            "type": "Address"
        },
        {
            "name": "termsOfSale",
            "baseName": "termsOfSale",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return CustomsInfo.attributeTypeMap;
    }
}

export namespace CustomsInfo {
    export enum OtherTypeEnum {
        COMMISSIONS = <any> 'COMMISSIONS',
        DISCOUNTS = <any> 'DISCOUNTS',
        HANDLINGFEES = <any> 'HANDLING_FEES',
        OTHER = <any> 'OTHER',
        ROYALTIESANDLICENSEFEES = <any> 'ROYALTIES_AND_LICENSE_FEES',
        TAXES = <any> 'TAXES'
    }
    export enum ProducerSpecificationEnum {
        MULTIPLESPECIFIED = <any> 'MULTIPLE_SPECIFIED',
        SAME = <any> 'SAME',
        SINGLESPECIFIED = <any> 'SINGLE_SPECIFIED',
        UNKNOWN = <any> 'UNKNOWN',
        AVAILABLEUPONREQUEST = <any> 'AVAILABLE_UPON_REQUEST'
    }
    export enum ReasonForExportEnum {
        GIFT = <any> 'GIFT',
        COMMERCIALSAMPLE = <any> 'COMMERCIAL_SAMPLE',
        MERCHANDISE = <any> 'MERCHANDISE',
        DOCUMENTS = <any> 'DOCUMENTS',
        RETURNEDGOODS = <any> 'RETURNED_GOODS',
        SOLD = <any> 'SOLD',
        NOTSOLD = <any> 'NOT_SOLD',
        OTHER = <any> 'OTHER',
        DANGEROUSGOOD = <any> 'DANGEROUS_GOOD',
        HUMANITARIANGOODS = <any> 'HUMANITARIAN_GOODS'
    }
    export enum ShippingDocumentTypeEnum {
        NAFTA = <any> 'NAFTA',
        COO = <any> 'COO'
    }
}
