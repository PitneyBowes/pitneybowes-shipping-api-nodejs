/**
 * Shipping API
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/PB.ShippingAPI/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/PB.ShippingAPI/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ShippingApi);
  }
}(this, function(expect, ShippingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ShippingApi.Manifest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Manifest', function() {
    it('should create an instance of Manifest', function() {
      // uncomment below and update the code to test Manifest
      //var instane = new ShippingApi.Manifest();
      //expect(instance).to.be.a(ShippingApi.Manifest);
    });

    it('should have the property carrier (base name: "carrier")', function() {
      // uncomment below and update the code to test the property carrier
      //var instane = new ShippingApi.Manifest();
      //expect(instance).to.be();
    });

    it('should have the property documents (base name: "documents")', function() {
      // uncomment below and update the code to test the property documents
      //var instane = new ShippingApi.Manifest();
      //expect(instance).to.be();
    });

    it('should have the property fromAddress (base name: "fromAddress")', function() {
      // uncomment below and update the code to test the property fromAddress
      //var instane = new ShippingApi.Manifest();
      //expect(instance).to.be();
    });

    it('should have the property inductionPostalCode (base name: "inductionPostalCode")', function() {
      // uncomment below and update the code to test the property inductionPostalCode
      //var instane = new ShippingApi.Manifest();
      //expect(instance).to.be();
    });

    it('should have the property manifestId (base name: "manifestId")', function() {
      // uncomment below and update the code to test the property manifestId
      //var instane = new ShippingApi.Manifest();
      //expect(instance).to.be();
    });

    it('should have the property manifestTrackingNumber (base name: "manifestTrackingNumber")', function() {
      // uncomment below and update the code to test the property manifestTrackingNumber
      //var instane = new ShippingApi.Manifest();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instane = new ShippingApi.Manifest();
      //expect(instance).to.be();
    });

    it('should have the property parcelTrackingNumbers (base name: "parcelTrackingNumbers")', function() {
      // uncomment below and update the code to test the property parcelTrackingNumbers
      //var instane = new ShippingApi.Manifest();
      //expect(instance).to.be();
    });

    it('should have the property submissionDate (base name: "submissionDate")', function() {
      // uncomment below and update the code to test the property submissionDate
      //var instane = new ShippingApi.Manifest();
      //expect(instance).to.be();
    });

  });

}));
